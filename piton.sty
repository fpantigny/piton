%%
%% This is file `piton.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% piton-code.dtx  (with options: `STY')
%% -------------------------------------------
%% Copyright (C) 2022-2025 by F. Pantigny
%% 
%% This file may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either
%% version 1.3 of this license or (at your option) any later
%% version.  The latest version of this license is in:
%% 
%%      http://www.latex-project.org/lppl.txt
%% 
%% and version 1.3 or later is part of all distributions of
%% LaTeX version 2005/12/01 or later.
%% -------------------------------------------
%% 
\def\PitonFileVersion{4.9a}
\def\PitonFileDate{2025/10/23}
\NeedsTeXFormat{LaTeX2e}
\ProvidesExplPackage
  {piton}
  {\PitonFileDate}
  {\PitonFileVersion}
  {Highlight computer listings with LPEG on LuaLaTeX}
\msg_new:nnn { piton } { latex-too-old }
  {
    Your~LaTeX~release~is~too~old. \\
    You~need~at~least~the~version~of~2025-06-01. \\
    If~you~use~Overleaf,~you~need~at~least~"TeXLive~2025".\\
    The~package~'piton'~won't~be~loaded.
  }
\providecommand { \IfFormatAtLeastTF } { \@ifl@t@r \fmtversion }
\IfFormatAtLeastTF
  { 2025-06-01 }
  { }
  { \msg_critical:nn { piton } { latex-too-old } }
\RequirePackage { amstext }
\RequirePackage { marginalia }
\RequirePackage { transparent }
\cs_new_protected:Npn \__piton_error:n { \msg_error:nn { piton } }
\cs_new_protected:Npn \__piton_warning:n { \msg_warning:nn { piton } }
\cs_new_protected:Npn \__piton_warning:nn { \msg_warning:nnn { piton } }
\cs_new_protected:Npn \__piton_error:nn { \msg_error:nnn { piton } }
\cs_new_protected:Npn \__piton_error:nnn { \msg_error:nnnn { piton } }
\cs_new_protected:Npn \__piton_fatal:n { \msg_fatal:nn { piton } }
\cs_new_protected:Npn \__piton_fatal:nn { \msg_fatal:nnn { piton } }
\cs_new_protected:Npn \__piton_msg_new:nn { \msg_new:nnn { piton } }
\cs_new_protected:Npn \__piton_msg_new:nnn #1 #2 #3
  {
    \bool_if:NTF \g__piton_messages_for_Overleaf_bool
      { \msg_new:nnn { piton } { #1 } { #2 \\ #3 } }
      { \msg_new:nnnn { piton } { #1 } { #2 } { #3 } }
  }
\cs_new_protected:Npn \__piton_error_or_warning:n
  { \bool_if:NTF \g__piton_messages_for_Overleaf_bool \__piton_warning:n \__piton_error:n }
\cs_new_protected:Npn \__piton_error_or_warning:nn
  { \bool_if:NTF \g__piton_messages_for_Overleaf_bool \__piton_warning:nn \__piton_error:nn }
\bool_new:N \g__piton_messages_for_Overleaf_bool
\bool_gset:Nn \g__piton_messages_for_Overleaf_bool
  {
       \str_if_eq_p:on \c_sys_jobname_str { _region_ }  % for Emacs
    || \str_if_eq_p:on \c_sys_jobname_str { output }   % for Overleaf
  }
\__piton_msg_new:nn { LuaLaTeX~mandatory }
  {
    LuaLaTeX~is~mandatory.\\
    The~package~'piton'~requires~the~engine~LuaLaTeX.\\
    \str_if_eq:onT \c_sys_jobname_str { output }
      { If~you~use~Overleaf,~you~can~switch~to~LuaLaTeX~in~the~"Menu"~and~
        if~you~use~TeXPage,~you~should~go~in~"Settings". \\ }
    \IfClassLoadedT { beamer }
      {
        Since~you~use~Beamer,~don't~forget~to~use~piton~in~frames~with~
        the~key~'fragile'.\\
      }
    \IfClassLoadedT { ltx-talk }
      {
        Since~you~use~'ltx-talk',~don't~forget~to~use~piton~in~
        environments~'frame*'.\\
      }
    That~error~is~fatal.
  }
\sys_if_engine_luatex:F { \__piton_fatal:n { LuaLaTeX~mandatory } }
\RequirePackage { luacode }
\__piton_msg_new:nnn { piton.lua~not~found }
  {
    The~file~'piton.lua'~can't~be~found.\\
    This~error~is~fatal.\\
    If~you~want~to~know~how~to~retrieve~the~file~'piton.lua',~type~H~<return>.
  }
  {
    On~the~site~CTAN,~go~to~the~page~of~'piton':~https://ctan.org/pkg/piton.~
    The~file~'README.md'~explains~how~to~retrieve~the~files~'piton.sty'~and~
    'piton.lua'.
  }
\file_if_exist:nF { piton.lua } { \__piton_fatal:n { piton.lua~not~found } }
\bool_new:N \g__piton_footnotehyper_bool
\bool_new:N \g__piton_footnote_bool
\bool_new:N \g__piton_beamer_bool
\keys_define:nn { piton }
  {
    footnote .bool_gset:N = \g__piton_footnote_bool ,
    footnotehyper .bool_gset:N = \g__piton_footnotehyper_bool ,
    footnote .usage:n = load ,
    footnotehyper .usage:n = load ,

    beamer .bool_gset:N = \g__piton_beamer_bool ,
    beamer .default:n = true ,
    beamer .usage:n = load ,

    unknown .code:n = \__piton_error:n { Unknown~key~for~package }
  }
\__piton_msg_new:nn { Unknown~key~for~package }
  {
    Unknown~key.\\
    You~have~used~the~key~'\l_keys_key_str'~when~loading~piton~
    but~the~only~keys~available~here~are~'beamer',~'footnote'~
    and~'footnotehyper'.~Other~keys~are~available~in~
    \token_to_str:N \PitonOptions.\\
    That~key~will~be~ignored.
  }
\ProcessKeyOptions
\IfClassLoadedT { beamer } { \bool_gset_true:N \g__piton_beamer_bool }
\IfClassLoadedT { ltx-talk } { \bool_gset_true:N \g__piton_beamer_bool }
\IfPackageLoadedT { beamerarticle } { \bool_gset_true:N \g__piton_beamer_bool }
\lua_now:e
  {
    piton = piton~or~{ }
    piton.last_code = ''
    piton.last_language = ''
    piton.join = ''
    piton.write = ''
    piton.path_write = ''
    \bool_if:NT \g__piton_beamer_bool { piton.beamer = true }
  }
\RequirePackage { xcolor }
\__piton_msg_new:nn { footnote~with~footnotehyper~package }
  {
    Footnote~forbidden.\\
    You~can't~use~the~option~'footnote'~because~the~package~
    footnotehyper~has~already~been~loaded.~
    If~you~want,~you~can~use~the~option~'footnotehyper'~and~the~footnotes~
    within~the~environments~of~piton~will~be~extracted~with~the~tools~
    of~the~package~footnotehyper.\\
    If~you~go~on,~the~package~footnote~won't~be~loaded.
  }
\__piton_msg_new:nn { footnotehyper~with~footnote~package }
  {
    You~can't~use~the~option~'footnotehyper'~because~the~package~
    footnote~has~already~been~loaded.~
    If~you~want,~you~can~use~the~option~'footnote'~and~the~footnotes~
    within~the~environments~of~piton~will~be~extracted~with~the~tools~
    of~the~package~footnote.\\
    If~you~go~on,~the~package~footnotehyper~won't~be~loaded.
  }
\bool_if:NT \g__piton_footnote_bool
  {
    \IfClassLoadedTF { beamer }
      { \bool_gset_false:N \g__piton_footnote_bool }
      {
        \IfPackageLoadedTF { footnotehyper }
          { \__piton_error:n { footnote~with~footnotehyper~package } }
          { \usepackage { footnote } }
      }
  }
\bool_if:NT \g__piton_footnotehyper_bool
  {
    \IfClassLoadedTF { beamer }
      { \bool_gset_false:N \g__piton_footnote_bool }
      {
        \IfPackageLoadedTF { footnote }
          { \__piton_error:n { footnotehyper~with~footnote~package } }
          { \usepackage { footnotehyper } }
        \bool_gset_true:N \g__piton_footnote_bool
      }
  }
\dim_new:N \l__piton_rounded_corners_dim
\bool_new:N \l__piton_in_label_bool
\dim_new:N \l__piton_tmpc_dim
\tl_new:N \l__piton_listing_tl
\box_new:N \g__piton_output_box
\str_new:N \l_piton_language_str
\str_set:Nn \l_piton_language_str { python }
\tl_new:N \g_piton_last_code_tl
\seq_new:N \l__piton_path_seq
\seq_new:N \g__piton_join_seq
\str_new:N \l__piton_path_write_str
\bool_new:N \l__piton_tcolorbox_bool
\dim_new:N \l__piton_tcb_margins_dim
\str_new:N \l__piton_box_str
\bool_new:N \l__piton_in_PitonOptions_bool
\bool_new:N \l__piton_in_PitonInputFile_bool
\tl_new:N \l__piton_font_command_tl
\tl_set:Nn \l__piton_font_command_tl { \ttfamily }
\int_new:N \g__piton_nb_lines_int
\int_new:N \l__piton_nb_non_empty_lines_int
\int_new:N \g__piton_line_int
\int_new:N \l__piton_splittable_int
\int_set:Nn \l__piton_splittable_int { 100 }
\tl_new:N \l__piton_split_separation_tl
\tl_set:Nn \l__piton_split_separation_tl
  { \vspace { \baselineskip } \vspace { -1.25pt } }
\clist_new:N \l__piton_bg_color_clist
\int_new:N \l__piton_bg_colors_int
\tl_new:N \l__piton_prompt_bg_color_tl
\tl_set:Nn \l__piton_prompt_bg_color_tl { gray!15 }
\tl_new:N \l__piton_space_in_string_tl
\str_new:N \l__piton_begin_range_str
\str_new:N \l__piton_end_range_str
\bool_new:N \g__piton_math_comments_bool
\str_new:N \l__piton_file_name_str
\bool_new:N \l__piton_print_bool
\bool_set_true:N \l__piton_print_bool
\str_new:N \l__piton_write_str
\str_new:N \l__piton_join_str
\str_new:N \l__piton_join_separation_str
\str_set:Nn \l__piton_join_separation_str { }
\bool_new:N \l__piton_paperclip_bool
\str_new:N \l__piton_paperclip_str
\bool_new:N \l__piton_annotation_bool
\int_new:N \g__piton_paperclip_int
\bool_new:N \l__piton_show_spaces_bool
\bool_new:N \l__piton_break_lines_in_Piton_bool
\bool_set_true:N \l__piton_break_lines_in_Piton_bool
\bool_new:N \l__piton_indent_broken_lines_bool
\tl_new:N \l__piton_continuation_symbol_tl
\tl_set:Nn \l__piton_continuation_symbol_tl { + }
\tl_new:N \l__piton_csoi_tl
\tl_set:Nn \l__piton_csoi_tl { $ \hookrightarrow \; $  }
\tl_new:N \l__piton_end_of_broken_line_tl
\tl_set:Nn \l__piton_end_of_broken_line_tl { \hspace* { 0.5em } \textbackslash }
\bool_new:N \l__piton_break_lines_in_piton_bool
\bool_new:N \l__piton_minimize_width_bool
\dim_new:N \l__piton_width_dim
\dim_new:N \l__piton_listing_width_dim
\dim_new:N \l__piton_code_width_dim
\box_new:N \l__piton_line_box
\dim_new:N \l__piton_left_margin_dim
\bool_new:N \l__piton_left_margin_auto_bool
\dim_new:N \l__piton_numbers_sep_dim
\dim_set:Nn \l__piton_numbers_sep_dim { 0.7 em }
\seq_new:N \g__piton_languages_seq
\int_new:N \l__piton_tab_size_int
\int_set:Nn \l__piton_tab_size_int { 4 }
\cs_new_protected:Npn \__piton_tab:
  {
    \bool_if:NTF \l__piton_show_spaces_bool
      {
        \hbox_set:Nn \l_tmpa_box
          { \prg_replicate:nn \l__piton_tab_size_int { ~ } }
        \dim_set:Nn \l_tmpa_dim { \box_wd:N \l_tmpa_box }
        \( \mathcolor { gray }
             { \hbox_to_wd:nn \l_tmpa_dim { \rightarrowfill } } \)
      }
      { \hbox:n { \prg_replicate:nn \l__piton_tab_size_int { ~ } } }
    \int_gadd:Nn \g__piton_indentation_int \l__piton_tab_size_int
  }
\int_new:N \l__piton_gobble_int
\tl_set_eq:NN \l__piton_space_in_string_tl \nobreakspace
\int_new:N \g__piton_indentation_int
\cs_new_protected:Npn \__piton_label:n #1
  {
    \bool_if:NTF \l__piton_line_numbers_bool
      {
        \@bsphack
        \protected@write \@auxout { }
          {
            \string \newlabel { #1 }
            {
              { \int_use:N \g__piton_visual_line_int }
              { \thepage }
              { }
              { line.#1 }
              { }
            }
          }
        \@esphack
        \IfPackageLoadedT { hyperref }
          { \Hy@raisedlink { \hyper@anchorstart { line.#1 } \hyper@anchorend } }
      }
      { \__piton_error:n { label~with~lines~numbers } }
  }
\cs_new_protected:Npn \__piton_zlabel:n #1
  {
    \bool_if:NTF \l__piton_line_numbers_bool
      {
        \@bsphack
        \protected@write \@auxout { }
          {
            \string \zref@newlabel { #1 }
              {
                \string \default { \int_use:N \g__piton_visual_line_int }
                \string \page { \thepage }
                \string \zc@type { line }
                \string \anchor { line.#1 }
              }
          }
        \@esphack
        \IfPackageLoadedT { hyperref }
          { \Hy@raisedlink { \hyper@anchorstart { line.#1 } \hyper@anchorend } }
      }
      { \__piton_error:n { label~with~lines~numbers } }
  }
\NewDocumentCommand { \__piton_rowcolor:n } { o m }
  {
    \tl_gset:ce
      { g__piton_color_ \int_eval:n { \g__piton_line_int + 1 }_ tl }
      { \tl_if_novalue:nTF { #1 } { #2 } { [ #1 ] { #2 } } }
    \bool_gset_true:N \g__piton_rowcolor_inside_bool
  }
\NewDocumentCommand { \__piton_noop_rowcolor } { o m } { }
\cs_new:Npn \__piton_marker_beginning:n #1 { }
\cs_new:Npn \__piton_marker_end:n #1 { }
\tl_new:N \g__piton_after_line_tl
\cs_new_protected:Npn \__piton_trailing_space: { }
\bool_new:N \g__piton_color_is_none_bool
\bool_new:N \g__piton_next_color_is_none_bool
\bool_new:N \g__piton_rowcolor_inside_bool
\clist_new:N \l__piton_detected_commands_clist
\clist_new:N \l__piton_raw_detected_commands_clist
\clist_new:N \l__piton_beamer_commands_clist
\clist_set:Nn \l__piton_beamer_commands_clist
  { uncover, only , visible , invisible , alert , action}
\clist_new:N \l__piton_beamer_environments_clist
\clist_set:Nn \l__piton_beamer_environments_clist
  { uncoverenv , onlyenv , visibleenv , invisibleenv , alertenv , actionenv }
\hook_gput_code:nnn { begindocument } { . }
  {
    \newtoks \PitonDetectedCommands
    \newtoks \PitonRawDetectedCommands
    \newtoks \PitonBeamerCommands
    \newtoks \PitonBeamerEnvironments
    \exp_args:NV \PitonDetectedCommands \l__piton_detected_commands_clist
    \exp_args:NV \PitonRawDetectedCommands \l__piton_raw_detected_commands_clist
    \exp_args:NV \PitonBeamerCommands \l__piton_beamer_commands_clist
    \exp_args:NV \PitonBeamerEnvironments \l__piton_beamer_environments_clist
  }
\tl_new:N \g__piton_def_vertical_commands_tl
\cs_new_protected:Npn \__piton_vertical_commands:n #1
  {
    \clist_put_right:Nn \l__piton_raw_detected_commands_clist { #1 }
    \clist_map_inline:nn { #1 }
      {
        \cs_set_eq:cc { __piton _ old _ ##1 : } { ##1 }
        \cs_new_protected:cn { __piton _ new _ ##1 : n }
          {
            \bool_if:nTF
              { \l__piton_tcolorbox_bool || ! \str_if_empty_p:N \l__piton_box_str }
              {
                \tl_gput_right:Nn \g__piton_after_line_tl
                  { \use:c { __piton _old _ ##1 : } { ####1 } }
              }
              {
                \cs_if_exist:cTF { g__piton_after_line _ \int_use:N \g__piton_line_int _ tl }
                  { \tl_gput_right:cn }
                  { \tl_gset:cn }
                  { g__piton_after_line _ \int_eval:n { \g__piton_line_int + 1 } _ tl }
                  { \use:c { __piton _old _ ##1 : } { ####1 } }
              }
          }
        \tl_gput_right:Nn \g__piton_def_vertical_commands_tl
          { \cs_set_eq:cc { ##1 } { __piton _ new _ ##1 : n } }
      }
  }
\cs_new_protected:Npn \__piton_replace_spaces:n #1
  {
    \tl_set:Nn \l_tmpa_tl { #1 }
    \bool_if:NTF \l__piton_show_spaces_bool
      {
        \tl_set:Nn \l__piton_space_in_string_tl { ␣ } % U+2423
        \tl_replace_all:NVn \l_tmpa_tl \c_catcode_other_space_tl { ␣ } % U+2423
      }
      {
        \bool_if:NT \l__piton_break_lines_in_Piton_bool
          {
            \tl_if_eq:NnF \l__piton_space_in_string_tl { ␣ }
              { \tl_set_eq:NN \l__piton_space_in_string_tl \__piton_breakable_space: }
            \tl_replace_all:NVn \l_tmpa_tl
              \c_catcode_other_space_tl
              \__piton_breakable_space:
          }
      }
   \l_tmpa_tl
  }
\cs_generate_variant:Nn \__piton_replace_spaces:n { o }

\cs_set_protected:Npn \__piton_end_line: { }
\cs_set_protected:Npn \__piton_begin_line: #1 \__piton_end_line:
  {
    \group_begin:
    \int_gzero:N \g__piton_indentation_int
    \hbox_set:Nn \l__piton_line_box
      {
        \skip_horizontal:N \l__piton_left_margin_dim
        \bool_if:NT \l__piton_line_numbers_bool
          {
            \int_set:Nn \l_tmpa_int
              {
                \lua_now:e
                  {
                    tex.sprint
                      (
                        piton.empty_lines
                          [ \int_eval:n { \g__piton_line_int + 1 } ]
                      )
                  }
              }
            \bool_lazy_or:nnT
              { \int_compare_p:nNn \l_tmpa_int = \c_one_int }
              { ! \l__piton_skip_empty_lines_bool }
              { \int_gincr:N \g__piton_visual_line_int }
            \bool_lazy_or:nnT
              { \int_compare_p:nNn \l_tmpa_int = \c_one_int }
              { ! \l__piton_skip_empty_lines_bool && \l__piton_label_empty_lines_bool }
              { \__piton_print_number: }
          }
        \int_compare:nNnT \l__piton_bg_colors_int > { \c_zero_int }
          {
            \dim_compare:nNnT \l__piton_left_margin_dim = \c_zero_dim
              { \skip_horizontal:n { 0.5 em } }
          }
        \bool_if:NTF \l__piton_minimize_width_bool
          {
            \hbox_set:Nn \l_tmpa_box
              {
                \language = -1
                \raggedright
                \strut
                \__piton_replace_spaces:n { #1 }
                \strut \hfil
              }
            \dim_compare:nNnTF { \box_wd:N \l_tmpa_box } < \l__piton_code_width_dim
               { \box_use:N \l_tmpa_box }
               { \__piton_vtop_of_code:n { #1 } }
          }
          { \__piton_vtop_of_code:n { #1 } }
      }
    \box_set_dp:Nn \l__piton_line_box { \box_dp:N \l__piton_line_box + 1.25 pt }
    \box_set_ht:Nn \l__piton_line_box { \box_ht:N \l__piton_line_box + 1.25 pt }
    \box_use_drop:N \l__piton_line_box
    \group_end:
    \g__piton_after_line_tl
    \tl_gclear:N \g__piton_after_line_tl
  }
\cs_new_protected:Npn \__piton_vtop_of_code:n #1
  {
    \vbox_top:n
      {
        \hsize = \l__piton_code_width_dim
        \language = -1
        \raggedright
        \strut
        \__piton_replace_spaces:n { #1 }
        \strut \hfil
      }
  }
\cs_new_protected:Npn \__piton_add_background_to_line_and_use:
  {
    \vtop
      {
        \offinterlineskip
        \hbox
          {
            \__piton_compute_and_set_color:
            \dim_set:Nn \l_tmpa_dim { \box_dp:N \l__piton_line_box }
            \bool_if:NT \g__piton_next_color_is_none_bool
              { \dim_sub:Nn \l_tmpa_dim { 2.5 pt } }
            \bool_if:NTF \g__piton_color_is_none_bool
              { \dim_zero:N \l_tmpb_dim }
              { \dim_set_eq:NN \l_tmpb_dim \l__piton_listing_width_dim }
            \dim_set:Nn \l__piton_tmpc_dim { \box_ht:N \l__piton_line_box }
            \dim_compare:nNnTF \l__piton_rounded_corners_dim > \c_zero_dim
              {
                \int_compare:nNnTF \g__piton_line_int = \c_one_int
                  {
                    \begin{tikzpicture}[baseline = 0cm]
                    \fill (0,0)
                          [rounded~corners = \l__piton_rounded_corners_dim]
                          -- (0,\l__piton_tmpc_dim)
                          -- (\l_tmpb_dim,\l__piton_tmpc_dim)
                          [sharp~corners] -- (\l_tmpb_dim,-\l_tmpa_dim)
                          -- (0,-\l_tmpa_dim)
                          -- cycle ;
                    \end{tikzpicture}
                  }
                  {
                    \int_compare:nNnTF \g__piton_line_int = \g__piton_nb_lines_int
                      {
                        \begin{tikzpicture}[baseline = 0cm]
                        \fill (0,0) -- (0,\l__piton_tmpc_dim)
                              -- (\l_tmpb_dim,\l__piton_tmpc_dim)
                              [rounded~corners = \l__piton_rounded_corners_dim]
                              -- (\l_tmpb_dim,-\l_tmpa_dim)
                              -- (0,-\l_tmpa_dim)
                              -- cycle ;
                        \end{tikzpicture}
                      }
                      {
                        \vrule height \l__piton_tmpc_dim
                        depth \l_tmpa_dim
                        width \l_tmpb_dim
                      }
                  }
              }
              {
                \vrule height \l__piton_tmpc_dim
                depth \l_tmpa_dim
                width \l_tmpb_dim
              }
          }
        \bool_if:NT \g__piton_next_color_is_none_bool
          { \skip_vertical:n { 2.5 pt } }
        \skip_vertical:n { - \box_ht_plus_dp:N \l__piton_line_box }
        \box_use_drop:N \l__piton_line_box
      }
  }
\cs_set_protected:Npn \__piton_compute_and_set_color:
  {
    \int_compare:nNnTF \l__piton_bg_colors_int = \c_zero_int
      { \tl_set:Nn \l_tmpa_tl { none } }
      {
        \int_set:Nn \l_tmpb_int
          { \int_mod:nn \g__piton_line_int \l__piton_bg_colors_int + 1 }
        \tl_set:Ne \l_tmpa_tl { \clist_item:Nn \l__piton_bg_color_clist \l_tmpb_int }
      }
    \cs_if_exist:cT { g__piton_color_ \int_use:N \g__piton_line_int _ tl }
      {
        \tl_set_eq:Nc \l_tmpa_tl { g__piton_color_ \int_use:N \g__piton_line_int _ tl }
        \cs_undefine:c { g__piton_color_ \int_use:N \g__piton_line_int _ tl }
      }
    \tl_if_eq:NnTF \l_tmpa_tl { none }
      { \bool_gset_true:N \g__piton_color_is_none_bool }
      {
        \bool_gset_false:N \g__piton_color_is_none_bool
        \__piton_color:o \l_tmpa_tl
      }
    \int_compare:nNnTF { \g__piton_line_int + 1 } = \g__piton_nb_lines_int
      { \bool_gset_false:N \g__piton_next_color_is_none_bool }
      {
        \int_compare:nNnTF \l__piton_bg_colors_int = \c_zero_int
          { \tl_set:Nn \l_tmpa_tl { none } }
          {
            \int_set:Nn \l_tmpb_int
              { \int_mod:nn { \g__piton_line_int + 1 } \l__piton_bg_colors_int + 1 }
            \tl_set:Ne \l_tmpa_tl { \clist_item:Nn \l__piton_bg_color_clist \l_tmpb_int }
          }
        \cs_if_exist:cT { g__piton_color_ \int_eval:n { \g__piton_line_int + 1 } _ tl }
          {
            \tl_set_eq:Nc \l_tmpa_tl
              { g__piton_color_ \int_eval:n { \g__piton_line_int + 1 } _ tl }
          }
        \tl_if_eq:NnTF \l_tmpa_tl { none }
          { \bool_gset_true:N \g__piton_next_color_is_none_bool }
          { \bool_gset_false:N \g__piton_next_color_is_none_bool }
      }
  }
\cs_set_protected:Npn \__piton_color:n #1
  {
    \tl_if_head_eq_meaning:nNTF { #1 } [
      {
        \tl_set:Nn \l_tmpa_tl { #1 }
        \tl_set_rescan:Nno \l_tmpa_tl { } \l_tmpa_tl
        \exp_last_unbraced:No \color \l_tmpa_tl
      }
      { \color { #1 } }
  }
\cs_generate_variant:Nn \__piton_color:n { o }
\cs_new_protected:Npn \__piton_par:
  {
    \int_gincr:N \g__piton_line_int
    \par
    \kern -2.5 pt
    \__piton_add_penalty_for_the_line:
  }
\cs_set_protected:Npn \__piton_breakable_space:
  {
    \discretionary
      { \hbox:n { \color { gray } \l__piton_end_of_broken_line_tl } }
      {
        \hbox_overlap_left:n
          {
            {
              \normalfont \footnotesize \color { gray }
              \l__piton_continuation_symbol_tl
            }
            \skip_horizontal:n { 0.3 em }
            \int_compare:nNnT \l__piton_bg_colors_int > { \c_zero_int }
              { \skip_horizontal:n { 0.5 em } }
          }
        \bool_if:NT \l__piton_indent_broken_lines_bool
          {
            \hbox:n
              {
                \prg_replicate:nn { \g__piton_indentation_int } { ~ }
                { \color { gray } \l__piton_csoi_tl }
              }
          }
      }
      { \hbox { ~ } }
  }
\bool_new:N \l__piton_line_numbers_bool
\bool_new:N \l__piton_skip_empty_lines_bool
\bool_set_true:N \l__piton_skip_empty_lines_bool
\bool_new:N \l__piton_line_numbers_absolute_bool
\tl_new:N \l__piton_line_numbers_format_tl
\tl_set:Nn \l__piton_line_numbers_format_tl { \footnotesize \color { gray } }
\bool_new:N \l__piton_label_empty_lines_bool
\bool_set_true:N \l__piton_label_empty_lines_bool
\int_new:N \l__piton_number_lines_start_int
\bool_new:N \l__piton_resume_bool
\bool_new:N \l__piton_split_on_empty_lines_bool
\bool_new:N \l__piton_splittable_on_empty_lines_bool
\bool_new:N \g__piton_label_as_zlabel_bool
\keys_define:nn { PitonOptions / marker }
  {
    beginning .cs_set:Np = \__piton_marker_beginning:n #1 ,
    beginning .value_required:n = true ,
    end .cs_set:Np = \__piton_marker_end:n #1 ,
    end .value_required:n = true ,
    include-lines .bool_set:N = \l__piton_marker_include_lines_bool ,
    include-lines .default:n = true ,
    unknown .code:n = \__piton_error:n { Unknown~key~for~marker }
  }
\keys_define:nn { PitonOptions / line-numbers }
  {
    true .code:n = \bool_set_true:N \l__piton_line_numbers_bool ,
    false .code:n = \bool_set_false:N \l__piton_line_numbers_bool ,

    start .code:n =
      \bool_set_true:N \l__piton_line_numbers_bool
      \int_set:Nn \l__piton_number_lines_start_int { #1 }  ,
    start .value_required:n = true ,

    skip-empty-lines .code:n =
      \bool_if:NF \l__piton_in_PitonOptions_bool
        { \bool_set_true:N \l__piton_line_numbers_bool }
      \str_if_eq:nnTF { #1 } { false }
        { \bool_set_false:N \l__piton_skip_empty_lines_bool }
        { \bool_set_true:N \l__piton_skip_empty_lines_bool } ,
    skip-empty-lines .default:n = true ,

    label-empty-lines .code:n =
      \bool_if:NF \l__piton_in_PitonOptions_bool
        { \bool_set_true:N \l__piton_line_numbers_bool }
      \str_if_eq:nnTF { #1 } { false }
        { \bool_set_false:N \l__piton_label_empty_lines_bool }
        { \bool_set_true:N \l__piton_label_empty_lines_bool } ,
    label-empty-lines .default:n = true ,

    absolute .code:n =
      \bool_if:NTF \l__piton_in_PitonOptions_bool
        { \bool_set_true:N \l__piton_line_numbers_absolute_bool }
        { \bool_set_true:N \l__piton_line_numbers_bool }
      \bool_if:NT \l__piton_in_PitonInputFile_bool
        {
          \bool_set_true:N \l__piton_line_numbers_absolute_bool
          \bool_set_false:N \l__piton_skip_empty_lines_bool
        } ,
    absolute .value_forbidden:n = true ,

    resume .code:n =
      \bool_set_true:N \l__piton_resume_bool
      \bool_if:NF \l__piton_in_PitonOptions_bool
        { \bool_set_true:N \l__piton_line_numbers_bool } ,
    resume .value_forbidden:n = true ,

    sep .dim_set:N = \l__piton_numbers_sep_dim ,
    sep .value_required:n = true ,

    format .tl_set:N = \l__piton_line_numbers_format_tl ,
    format .value_required:n = true ,

    unknown .code:n = \__piton_error:n { Unknown~key~for~line-numbers }
  }
\keys_define:nn { PitonOptions }
  {
    indentations-for-Foxit .choices:nn = { true , false }
      {
        \tl_if_eq:VnTF \l_keys_value_tl { true }
          { \__piton_define_leading_space_Foxit: }
          { \__piton_define_leading_space_normal: }
      } ,
    box .choices:nn = { c , t , b , m }
      { \str_set_eq:NN \l__piton_box_str \l_keys_choice_tl } ,
    box .default:n = c ,
    break-strings-anywhere .bool_set:N = \l__piton_break_strings_anywhere_bool ,
    break-strings-anywhere .default:n = true ,
    break-numbers-anywhere .bool_set:N = \l__piton_break_numbers_anywhere_bool ,
    break-numbers-anywhere .default:n = true  ,
    detected-commands .code:n =
      \clist_if_in:nnTF { #1 } { rowcolor }
        {
          \__piton_error:n { rowcolor~in~detected-commands }
          \clist_set:Nn \l_tmpa_clist { #1 }
          \clist_remove_all:Nn \l_tmpa_clist { rowcolor }
          \clist_put_right:No \l__piton_detected_commands_clist \l_tmpa_clist
        }
        { \clist_put_right:Nn \l__piton_detected_commands_clist { #1 } } ,
    detected-commands .value_required:n = true ,
    detected-commands .usage:n = preamble ,
    vertical-detected-commands .code:n = \__piton_vertical_commands:n { #1 } ,
    vertical-detected-commands .value_required:n = true ,
    vertical-detected-commands .usage:n = preamble ,
    raw-detected-commands .code:n =
      \clist_put_right:Nn \l__piton_raw_detected_commands_clist { #1 } ,
    raw-detected-commands .value_required:n = true ,
    raw-detected-commands .usage:n = preamble ,
    detected-beamer-commands .code:n =
      \__piton_error_if_not_in_beamer:
      \clist_put_right:Nn \l__piton_beamer_commands_clist { #1 } ,
    detected-beamer-commands .value_required:n = true ,
    detected-beamer-commands .usage:n = preamble ,
    detected-beamer-environments .code:n =
      \__piton_error_if_not_in_beamer:
      \clist_put_right:Nn \l__piton_beamer_environments_clist { #1 } ,
    detected-beamer-environments .value_required:n = true ,
    detected-beamer-environments .usage:n = preamble ,
    begin-escape .code:n =
      \lua_now:e { piton.begin_escape = "\lua_escape:n{#1}" } ,
    begin-escape .value_required:n = true ,
    begin-escape .usage:n = preamble ,

    end-escape   .code:n =
      \lua_now:e { piton.end_escape = "\lua_escape:n{#1}" } ,
    end-escape   .value_required:n = true ,
    end-escape .usage:n = preamble ,

    begin-escape-math .code:n =
      \lua_now:e { piton.begin_escape_math = "\lua_escape:n{#1}" } ,
    begin-escape-math .value_required:n = true ,
    begin-escape-math .usage:n = preamble ,

    end-escape-math .code:n =
      \lua_now:e { piton.end_escape_math = "\lua_escape:n{#1}" } ,
    end-escape-math .value_required:n = true ,
    end-escape-math .usage:n = preamble ,

    comment-latex .code:n = \lua_now:n { comment_latex = "#1" } ,
    comment-latex .value_required:n = true ,
    comment-latex .usage:n = preamble ,

    label-as-zlabel .bool_gset:N = \g__piton_label_as_zlabel_bool ,
    label-as-zlabel .default:n = true ,
    label-as-zlabel .usage:n = preamble ,

    math-comments .bool_gset:N = \g__piton_math_comments_bool ,
    math-comments .default:n  = true ,
    math-comments .usage:n = preamble ,
    language      .code:n =
      \str_set:Ne \l_piton_language_str { \str_lowercase:n { #1 } } ,
    language      .value_required:n  = true ,
    path          .code:n =
      \seq_clear:N \l__piton_path_seq
      \clist_map_inline:nn { #1 }
        {
          \str_set:Nn \l_tmpa_str { ##1 }
          \seq_put_right:No \l__piton_path_seq { \l_tmpa_str }
        } ,
    path             .value_required:n  = true ,
    path             .initial:n         = . ,
    path-write       .str_set:N         = \l__piton_path_write_str ,
    path-write       .value_required:n  = true ,
    font-command     .tl_set:N          = \l__piton_font_command_tl ,
    font-command     .value_required:n  = true ,
    gobble           .int_set:N         = \l__piton_gobble_int ,
    gobble           .default:n         = -1 ,
    auto-gobble      .code:n            = \int_set:Nn \l__piton_gobble_int { -1 } ,
    auto-gobble      .value_forbidden:n = true ,
    env-gobble       .code:n            = \int_set:Nn \l__piton_gobble_int { -2 } ,
    env-gobble       .value_forbidden:n = true ,
    tabs-auto-gobble .code:n            = \int_set:Nn \l__piton_gobble_int { -3 } ,
    tabs-auto-gobble .value_forbidden:n = true ,

    splittable-on-empty-lines .bool_set:N = \l__piton_splittable_on_empty_lines_bool ,
    splittable-on-empty-lines .default:n  = true ,

    split-on-empty-lines .bool_set:N = \l__piton_split_on_empty_lines_bool ,
    split-on-empty-lines .default:n  = true ,

    split-separation .tl_set:N         = \l__piton_split_separation_tl ,
    split-separation .value_required:n = true ,

    add-to-split-separation .code:n =
      \tl_put_right:Nn \l__piton_split_separation_tl { #1 } ,
    add-to-split-separation .value_required:n = true ,

    marker .code:n =
      \bool_lazy_or:nnTF
        \l__piton_in_PitonInputFile_bool
        \l__piton_in_PitonOptions_bool
        { \keys_set:nn { PitonOptions / marker } { #1 } }
        { \__piton_error:n { Invalid~key } } ,
    marker .value_required:n = true ,

    line-numbers .code:n =
      \keys_set:nn { PitonOptions / line-numbers } { #1 } ,
    line-numbers .default:n = true ,

    splittable       .int_set:N         = \l__piton_splittable_int ,
    splittable       .default:n         = 1 ,
    background-color .code:n =
      \clist_set:Nn \l__piton_bg_color_clist { #1 }
      \int_set:Nn \l__piton_bg_colors_int { \clist_count:N \l__piton_bg_color_clist } ,
    background-color .value_required:n  = true ,
    prompt-background-color .tl_set:N         = \l__piton_prompt_bg_color_tl ,
    prompt-background-color .value_required:n = true ,
    print .bool_set:N = \l__piton_print_bool ,
    print .value_required:n = true ,

    width .code:n =
      \str_if_eq:nnTF  { #1 } { min }
        {
          \bool_set_true:N \l__piton_minimize_width_bool
          \dim_zero:N \l__piton_width_dim
        }
        {
          \bool_set_false:N \l__piton_minimize_width_bool
          \dim_set:Nn \l__piton_width_dim { #1 }
        } ,
    width .value_required:n  = true ,

    max-width .code:n =
      \bool_set_true:N \l__piton_minimize_width_bool
      \dim_set:Nn \l__piton_width_dim { #1 } ,
    max-width .value_required:n = true ,

    paperclip .code:n =
      \bool_set_true:N \l__piton_paperclip_bool
      \tl_if_novalue:nTF { #1 }
        { \str_set:Nn \l__piton_paperclip_str { } }
        { \str_set:Nn \l__piton_paperclip_str { #1 } } ,

    annotation .bool_set:N = \l__piton_annotation_bool ,
    annotation .default:n = true ,

    write .str_set:N = \l__piton_write_str ,
    write .value_required:n = true ,
    no-write .code:n = \str_set_eq:NN \l__piton_write_str \c_empty_str ,
    no-write .value_forbidden:n = true ,
    join .code:n =
      \str_set:Nn \l__piton_join_str { #1 }
      \seq_if_in:NnF \g__piton_join_seq { #1 }
        { \seq_gput_right:No \g__piton_join_seq { #1 } } ,
    join .value_required:n = true ,
    join-separation .str_set:N = \l__piton_join_separation_str ,
    join-separation .value_required:n = true ,
    no-join .code:n = \str_set_eq:NN \l__piton_join_str \c_empty_str ,
    no-join .value_forbidden:n = true ,
    left-margin .code:n =
      \str_if_eq:nnTF { #1 } { auto }
        {
          \dim_zero:N \l__piton_left_margin_dim
          \bool_set_true:N \l__piton_left_margin_auto_bool
        }
        {
          \dim_set:Nn \l__piton_left_margin_dim { #1 }
          \bool_set_false:N \l__piton_left_margin_auto_bool
        } ,
    left-margin      .value_required:n  = true ,

    tab-size         .int_set:N         = \l__piton_tab_size_int ,
    tab-size         .value_required:n  = true ,
    show-spaces      .bool_set:N        = \l__piton_show_spaces_bool ,
    show-spaces      .value_forbidden:n = true ,
    show-spaces-in-strings .code:n      =
        \tl_set:Nn \l__piton_space_in_string_tl { ␣ } , % U+2423
    show-spaces-in-strings .value_forbidden:n = true ,
    break-lines-in-Piton .bool_set:N    = \l__piton_break_lines_in_Piton_bool ,
    break-lines-in-Piton .default:n     = true ,
    break-lines-in-piton .bool_set:N    = \l__piton_break_lines_in_piton_bool ,
    break-lines-in-piton .default:n     = true ,
    break-lines .meta:n = { break-lines-in-piton , break-lines-in-Piton } ,
    break-lines .value_forbidden:n      = true ,
    indent-broken-lines .bool_set:N     = \l__piton_indent_broken_lines_bool ,
    indent-broken-lines .default:n      = true ,
    end-of-broken-line  .tl_set:N       = \l__piton_end_of_broken_line_tl ,
    end-of-broken-line  .value_required:n = true ,
    continuation-symbol .tl_set:N       = \l__piton_continuation_symbol_tl ,
    continuation-symbol .value_required:n = true ,
    continuation-symbol-on-indentation .tl_set:N = \l__piton_csoi_tl ,
    continuation-symbol-on-indentation .value_required:n = true ,

    first-line .code:n = \__piton_in_PitonInputFile:n
      { \int_set:Nn \l__piton_first_line_int { #1 } } ,
    first-line .value_required:n = true ,

    last-line .code:n = \__piton_in_PitonInputFile:n
      { \int_set:Nn \l__piton_last_line_int { #1 } } ,
    last-line .value_required:n = true ,

    begin-range .code:n = \__piton_in_PitonInputFile:n
      { \str_set:Nn \l__piton_begin_range_str { #1 } } ,
    begin-range .value_required:n = true ,

    end-range .code:n = \__piton_in_PitonInputFile:n
      { \str_set:Nn \l__piton_end_range_str { #1 } } ,
    end-range .value_required:n = true ,

    range .code:n = \__piton_in_PitonInputFile:n
      {
        \str_set:Nn \l__piton_begin_range_str { #1 }
        \str_set:Nn \l__piton_end_range_str { #1 }
      } ,
    range .value_required:n = true ,

    env-used-by-split .code:n =
      \lua_now:n { piton.env_used_by_split = '#1' } ,
    env-used-by-split .initial:n = Piton ,

    resume .meta:n = line-numbers/resume ,

    unknown .code:n = \__piton_error:n { Unknown~key~for~PitonOptions } ,

    % deprecated
    all-line-numbers .code:n =
      \bool_set_true:N \l__piton_line_numbers_bool
      \bool_set_false:N \l__piton_skip_empty_lines_bool ,
    rounded-corners .code:n =
      \AtBeginDocument
        {
          \IfPackageLoadedTF { tikz }
            { \dim_set:Nn \l__piton_rounded_corners_dim { #1 } }
            { \__piton_err_rounded_corners_without_Tikz: }
        } ,
    rounded-corners .default:n = 4 pt
  }
\hook_gput_code:nnn { begindocument } { . }
  {
    \IfPackageLoadedTF { tcolorbox }
      {
        \pgfkeysifdefined { / tcb / libload / breakable }
          {
            \keys_define:nn { PitonOptions }
              {
                tcolorbox .bool_set:N = \l__piton_tcolorbox_bool ,
                tcolorbox .default:n = true
              }
          }
          {
            \keys_define:nn { PitonOptions }
              { tcolorbox .code:n = \__piton_error:n { library~breakable~not~loaded } }
          }
      }
      {
        \keys_define:nn { PitonOptions }
          { tcolorbox .code:n = \__piton_error:n { tcolorbox~not~loaded } }
      }
  }
\cs_new_protected:Npn \__piton_err_rounded_corners_without_Tikz:
  {
    \__piton_error:n { rounded-corners~without~Tikz }
    \cs_gset:Npn \__piton_err_rounded_corners_without_Tikz: { }
  }
\cs_new_protected:Npn \__piton_in_PitonInputFile:n #1
  {
    \bool_if:NTF \l__piton_in_PitonInputFile_bool
      { #1 }
      { \__piton_error:n { Invalid~key } }
  }
\NewDocumentCommand \PitonOptions { m }
  {
    \bool_set_true:N \l__piton_in_PitonOptions_bool
    \keys_set:nn { PitonOptions } { #1 }
    \bool_set_false:N \l__piton_in_PitonOptions_bool
  }
\NewDocumentCommand \__piton_fake_PitonOptions { }
  { \keys_set:nn { PitonOptions } }
\int_new:N \g__piton_visual_line_int
\cs_new_protected:Npn \__piton_incr_visual_line:
  {
    \bool_if:NF \l__piton_skip_empty_lines_bool
      { \int_gincr:N \g__piton_visual_line_int }
  }
\cs_new_protected:Npn \__piton_print_number:
  {
    \hbox_overlap_left:n
      {
        {
          \l__piton_line_numbers_format_tl
          \pdfextension literal { /Artifact << /ActualText (\space) >> BDC }
          { \int_to_arabic:n \g__piton_visual_line_int }
          \pdfextension literal { EMC }
        }
        \skip_horizontal:N \l__piton_numbers_sep_dim
      }
  }
\NewDocumentCommand { \NewPitonLanguage } { O { } m ! o }
  {
    \tl_if_novalue:nTF { #3 }
      { \__piton_NewPitonLanguage:nnn { #1 } { #2 } }
      { \__piton_NewPitonLanguage:nnnnn { #1 } { #2 } { #3 } }
  }
\prop_new:N \g__piton_languages_prop
\keys_define:nn { NewPitonLanguage }
  {
    morekeywords .code:n = ,
    otherkeywords .code:n = ,
    sensitive .code:n = ,
    keywordsprefix .code:n = ,
    moretexcs .code:n = ,
    morestring .code:n = ,
    morecomment .code:n = ,
    moredelim .code:n = ,
    moredirectives .code:n = ,
    tag .code:n = ,
    alsodigit .code:n = ,
    alsoletter .code:n = ,
    alsoother .code:n = ,
    unknown .code:n = \__piton_error:n { Unknown~key~NewPitonLanguage }
  }
\cs_new_protected:Npn \__piton_NewPitonLanguage:nnn #1 #2 #3
  {
    \tl_set:Ne \l_tmpa_tl
      {
        \tl_if_blank:nF { #1 } { [ \str_lowercase:n { #1 } ] }
        \str_lowercase:n { #2 }
      }
    \keys_set:nn { NewPitonLanguage } { #3 }
    \prop_gput:Non \g__piton_languages_prop \l_tmpa_tl { #3 }
    \__piton_NewPitonLanguage:on \l_tmpa_tl { #3 }
  }
\cs_new_protected:Npn \__piton_NewPitonLanguage:nn #1 #2
  {
    \hook_gput_code:nnn { begindocument } { . }
      { \lua_now:e { piton.new_language("#1","\lua_escape:n{#2}") } }
  }
\cs_generate_variant:Nn \__piton_NewPitonLanguage:nn { o }
\cs_new_protected:Npn \__piton_NewPitonLanguage:nnnnn #1 #2 #3 #4 #5
  {
    \tl_set:Ne \l_tmpa_tl
      {
        \tl_if_blank:nF { #3 } { [ \str_lowercase:n { #3 } ] }
        \str_lowercase:n { #4 }
      }
    \prop_get:NoNTF \g__piton_languages_prop \l_tmpa_tl \l_tmpb_tl
      { \__piton_NewPitonLanguage:nnno { #1 } { #2 } { #5 } \l_tmpb_tl }
      { \__piton_error:n { Language~not~defined } }
  }
\cs_new_protected:Npn \__piton_NewPitonLanguage:nnnn #1 #2 #3 #4
  { \__piton_NewPitonLanguage:nnn { #1 } { #2 } { #4 , #3 } }
\cs_generate_variant:Nn \__piton_NewPitonLanguage:nnnn { n n n o }
\NewDocumentCommand { \piton } { }
  { \peek_meaning:NTF \bgroup { \__piton_piton_standard } { \__piton_piton_verbatim } }
\NewDocumentCommand { \__piton_piton_standard } { m }
  {
    \group_begin:
    \tl_if_eq:NnF \l__piton_space_in_string_tl { ␣ }
      {
        \bool_lazy_or:nnT
          \l__piton_break_lines_in_piton_bool
          \l__piton_break_strings_anywhere_bool
          { \tl_set:Nn \l__piton_space_in_string_tl { \exp_not:N \space } }
      }
    \automatichyphenmode = 1
    \cs_set_eq:NN \\ \c_backslash_str
    \cs_set_eq:NN \% \c_percent_str
    \cs_set_eq:NN \{ \c_left_brace_str
    \cs_set_eq:NN \} \c_right_brace_str
    \cs_set_eq:NN \$ \c_dollar_str
    \cs_set_eq:cN { ~ } \space
    \cs_set_eq:NN \__piton_begin_line: \prg_do_nothing:
    \cs_set_eq:NN \rowcolor \__piton_noop_rowcolor
    \tl_set:Ne \l_tmpa_tl
      {
        \lua_now:e
          { piton.ParseBis('\l_piton_language_str',token.scan_string()) }
          { #1 }
      }
    \bool_if:NTF \l__piton_show_spaces_bool
      { \tl_replace_all:NVn \l_tmpa_tl \c_catcode_other_space_tl { ␣ } } % U+2423
      {
        \bool_if:NT \l__piton_break_lines_in_piton_bool
          { \tl_replace_all:NVn \l_tmpa_tl \c_catcode_other_space_tl \space }
      }
    \if_mode_math:
       \text { \l__piton_font_command_tl \l_tmpa_tl }
    \else:
       \l__piton_font_command_tl \l_tmpa_tl
    \fi:
    \group_end:
  }
\NewDocumentCommand { \__piton_piton_verbatim } { v }
  {
    \group_begin:
    \automatichyphenmode = 1
    \cs_set_eq:NN \__piton_begin_line: \prg_do_nothing:
    \cs_set_eq:NN \rowcolor \__piton_noop_rowcolor
    \tl_set:Ne \l_tmpa_tl
      {
        \lua_now:e
          { piton.Parse('\l_piton_language_str',token.scan_string()) }
          { #1 }
      }
    \bool_if:NT \l__piton_show_spaces_bool
      { \tl_replace_all:NVn \l_tmpa_tl \c_catcode_other_space_tl { ␣ } } % U+2423
    \if_mode_math:
       \text { \l__piton_font_command_tl \l_tmpa_tl }
    \else:
       \l__piton_font_command_tl \l_tmpa_tl
    \fi:
    \group_end:
  }

\cs_new_protected:Npn \__piton_piton:n #1
  { \tl_if_blank:nF { #1 } { \__piton_piton_i:n { #1 } } }

\cs_new_protected:Npn \__piton_piton_i:n #1
  {
    \group_begin:
    \cs_set_eq:NN \__piton_begin_line: \prg_do_nothing:
    \cs_set:cpn { pitonStyle _ \l_piton_language_str  _ Prompt } { }
    \cs_set:cpn { pitonStyle _ Prompt } { }
    \cs_set_eq:NN \__piton_leading_space: \space
    \cs_set_eq:NN \__piton_trailing_space: \space
    \tl_set:Ne \l_tmpa_tl
      {
        \lua_now:e
          { piton.ParseTer('\l_piton_language_str',token.scan_string()) }
          { #1 }
      }
    \bool_if:NT \l__piton_show_spaces_bool
      { \tl_replace_all:NVn \l_tmpa_tl \c_catcode_other_space_tl { ␣ } } % U+2423
    \__piton_replace_spaces:o \l_tmpa_tl
    \group_end:
  }
\cs_new_protected:Npn \__piton_pre_composition:
  {
    \dim_compare:nNnT \l__piton_width_dim = \c_zero_dim
      {
        \dim_set_eq:NN \l__piton_width_dim \linewidth
        \str_if_empty:NF \l__piton_box_str
          { \bool_set_true:N \l__piton_minimize_width_bool }
      }
    \dim_set:Nn \l__piton_listing_width_dim
      {
        \bool_if:NTF \l__piton_tcolorbox_bool
          {
            \l__piton_width_dim -
            ( \kvtcb@left@rule
            + \kvtcb@leftupper
            + \kvtcb@boxsep * 2
            + \kvtcb@rightupper
            + \kvtcb@right@rule )
          }
          { \l__piton_width_dim }
      }
    \legacy_if:nT { @inlabel } { \bool_set_true:N \l__piton_in_label_bool }
    \automatichyphenmode = 1
    \bool_if:NF \l__piton_resume_bool { \int_gzero:N \g__piton_visual_line_int }
    \g__piton_def_vertical_commands_tl
    \int_gzero:N \g__piton_line_int
    \int_gzero:N \g__piton_nb_lines_int
    \dim_zero:N \parindent
    \dim_zero:N \lineskip
    \dim_zero:N \parskip
    \cs_set_eq:NN \rowcolor \__piton_rowcolor:n
    \int_compare:nNnT \l__piton_bg_colors_int > { \c_zero_int }
      { \bool_set_true:N \l__piton_bg_bool }
    \bool_gset_false:N \g__piton_rowcolor_inside_bool
    \IfPackageLoadedTF { zref-base }
      {
        \bool_if:NTF \g__piton_label_as_zlabel_bool
          { \cs_set_eq:NN \label \__piton_zlabel:n }
          { \cs_set_eq:NN \label \__piton_label:n }
        \cs_set_eq:NN \zlabel \__piton_zlabel:n
      }
      { \cs_set_eq:NN \label \__piton_label:n }
    \l__piton_font_command_tl
  }
\cs_new_protected:Npn \__piton_compute_left_margin:
  {
     \use:e
       {
         \bool_if:NTF \l__piton_skip_empty_lines_bool
           { \lua_now:n { piton.CountNonEmptyLines(token.scan_argument()) } }
           { \lua_now:n { piton.CountLines(token.scan_argument()) } }
         { \l__piton_listing_tl }
       }
     \hbox_set:Nn \l_tmpa_box
       {
         \l__piton_line_numbers_format_tl
         \int_to_arabic:n
           {
              \g__piton_visual_line_int
              +
              \bool_if:NTF \l__piton_skip_empty_lines_bool
                { \l__piton_nb_non_empty_lines_int }
                { \g__piton_nb_lines_int }
           }
       }
     \dim_set:Nn \l__piton_left_margin_dim
       { \box_wd:N \l_tmpa_box + \l__piton_numbers_sep_dim + 0.1 em }
  }
\cs_new_protected:Npn \__piton_recompute_listing_width:
  {
    \dim_set:Nn \l__piton_listing_width_dim { \box_wd:N \g__piton_output_box }
    \int_compare:nNnTF \l__piton_bg_colors_int > { \c_zero_int }
      {
        \dim_add:Nn \l__piton_listing_width_dim { 0.5 em }
        \dim_compare:nNnTF \l__piton_left_margin_dim = \c_zero_dim
          { \dim_add:Nn \l__piton_listing_width_dim { 0.5 em } }
          { \dim_add:Nn \l__piton_listing_width_dim \l__piton_left_margin_dim }
      }
      { \dim_add:Nn \l__piton_listing_width_dim \l__piton_left_margin_dim }
  }
\cs_new_protected:Npn \__piton_compute_code_width:
  {
    \dim_set_eq:NN \l__piton_code_width_dim \l__piton_listing_width_dim
    \int_compare:nNnTF \l__piton_bg_colors_int > { \c_zero_int }
      {
        \dim_sub:Nn \l__piton_code_width_dim { 0.5 em }
        \dim_compare:nNnTF \l__piton_left_margin_dim = \c_zero_dim
          { \dim_sub:Nn \l__piton_code_width_dim { 0.5 em } }
          { \dim_sub:Nn \l__piton_code_width_dim \l__piton_left_margin_dim }
      }
      { \dim_sub:Nn \l__piton_code_width_dim \l__piton_left_margin_dim }
  }
\cs_new_protected:Npn \__piton_store_body:n #1
  {
    \tl_set:Ne \obeyedline { \char_generate:nn { 13 } { 11 } }
    \tl_set:Ne \l__piton_listing_tl { #1 }
    \tl_set_eq:NN \ProcessedArgument \l__piton_listing_tl
  }
\cs_new_protected:Nn \__piton_DefinePitonEnvironment:nnnnn
  {
    \use:c { #1 DocumentEnvironment } { #2 } { #3 > { \__piton_store_body:n } c }
      {
        \cs_set_eq:NN \PitonOptions \__piton_fake_PitonOptions
        #4
        \__piton_pre_composition:
        \int_compare:nNnT { \l__piton_number_lines_start_int } > { \c_zero_int }
          {
            \int_gset:Nn \g__piton_visual_line_int
              { \l__piton_number_lines_start_int - 1 }
          }
        \bool_if:NT \g__piton_beamer_bool
          { \__piton_translate_beamer_env:o { \l__piton_listing_tl } }
        \bool_if:NT \g__piton_footnote_bool \savenotes
        \__piton_composition:
        \bool_lazy_or:nnT { \l__piton_paperclip_bool } { \l__piton_annotation_bool }
          { \__piton_create_paperclip_annotation: }
        \bool_if:NT \g__piton_footnote_bool \endsavenotes
        #5
      }
      { \ignorespacesafterend }
  }
\cs_new_protected:Npn \__piton_create_paperclip_annotation:
  {
    \marginalia
      {
        \vspace* { - 0.8 em }
        \hbox:n
          {
            \vrule~height~0~pt~depth~12~pt~width~0~pt
            \bool_if:NT \l__piton_annotation_bool
              {
                \lua_now:n
                  {
                    pdf.immediateobj
                      ( "<" .. piton.utf16 ( piton.get_last_code ( ) ) .. ">" )
                  }
                \pdfextension annot~width~5pt~height~10pt~depth~0pt
                  {
                    /Subtype /Text
                    /Contents~\pdf_object_ref_last:
                    /Name /Note
                    /Subj (Computer~listing)
                    /ReplyType /Group
                    /F~512
                    /C [0.8~0.8~0.8]
                  }
                \hspace* { 7 mm }
              }
            \bool_if:NT \l__piton_paperclip_bool { \__piton_create_paperclip: }
          }
      }
  }
\cs_new_protected:Npn \__piton_create_paperclip:
  {
    \str_if_empty:NT \l__piton_paperclip_str
      {
        \int_gincr:N \g__piton_paperclip_int
        \str_set:Ne \l__piton_paperclip_str { listing_\int_use:N \g__piton_paperclip_int .txt }
      }
    \lua_now:n { pdf.immediateobj ( "stream" , tostring ( piton.get_last_code() ) ) }
    \box_move_down:nn
      { 10 pt }
      {
        \hbox:n
          {
            \pdfextension annot~width~10pt~height~20pt~depth~0pt
              {
                /Subtype /FileAttachment
                /Name /Paperclip
                /F~8 % no zoom
                /Contents (The~computer~listing)
                /FS <<
                       /Type /Filespec
                       /F (\l__piton_paperclip_str)
                       /EF << /F~\pdf_object_ref_last: >>
                       /AFRelationship /Supplement
                    >>
               }
          }
      }
  }
\NewDocumentCommand { \NewPitonEnvironment } { }
  { \__piton_DefinePitonEnvironment:nnnnn { New } }
\NewDocumentCommand { \DeclarePitonEnvironment } { }
  { \__piton_DefinePitonEnvironment:nnnnn { Declare } }
\NewDocumentCommand { \RenewPitonEnvironment } { }
  { \__piton_DefinePitonEnvironment:nnnnn { Renew } }
\NewDocumentCommand { \ProvidePitonEnvironment } { }
  { \__piton_DefinePitonEnvironment:nnnnn { Provide } }
\cs_new_protected:Npn \__piton_translate_beamer_env:n
  { \lua_now:e { piton.TranslateBeamerEnv(token.scan_argument ( ) ) } }
\cs_generate_variant:Nn \__piton_translate_beamer_env:n { o }
\cs_new_protected:Npn \__piton_composition:
  {
    \str_if_empty:NT \l__piton_box_str
      {
        \mode_if_vertical:F
          { \bool_if:NF \l__piton_in_PitonInputFile_bool { \newline } }
      }
    \bool_lazy_and:nnT \l__piton_left_margin_auto_bool \l__piton_line_numbers_bool
      { \__piton_compute_left_margin: }
    \lua_now:e
      {
        piton.join_separation = "\l__piton_join_separation_str"
        piton.join = "\l__piton_join_str"
        piton.write = "\l__piton_write_str"
        piton.path_write = "\l__piton_path_write_str"
      }
    \noindent
    \bool_if:NTF \l__piton_print_bool
      {
        \bool_if:NTF \l__piton_split_on_empty_lines_bool
          { \par \__piton_retrieve_gobble_split_parse:o \l__piton_listing_tl }
          {
            \__piton_create_output_box:
            \bool_if:NTF \l__piton_tcolorbox_bool
              {
                \str_if_empty:NTF \l__piton_box_str
                  { \__piton_composition_iii: }
                  { \__piton_composition_iv: }
              }
              {
                \str_if_empty:NTF \l__piton_box_str
                  { \__piton_composition_i: }
                  { \__piton_composition_ii: }
              }
         }
      }
      { \__piton_gobble_parse_no_print:o \l__piton_listing_tl }
  }
\cs_new_protected:Npn \__piton_composition_i:
  {
    \box_clear:N \g_tmpa_box
    \box_clear_new:N \g__piton_line_box
    \vbox_set:Nn \l_tmpa_box
      {
        \vbox_unpack_drop:N \g__piton_output_box
        \bool_gset_false:N \g_tmpa_bool
        \unskip \unskip
        \bool_gset_false:N \g_tmpa_bool
        \bool_do_until:nn \g_tmpa_bool
          {
            \unskip \unskip \unskip
            \unpenalty \unkern
            \box_set_to_last:N \l__piton_line_box
            \box_if_empty:NTF \l__piton_line_box
              { \bool_gset_true:N \g_tmpa_bool }
              {
                \vbox_gset:Nn \g_tmpa_box
                  {
                    \vbox_unpack:N \g_tmpa_box
                    \box_use:N \l__piton_line_box
                  }
              }
          }
      }
    \bool_gset_false:N \g_tmpa_bool
    \int_zero:N \g__piton_line_int
    \bool_do_until:nn \g_tmpa_bool
      {
        \vbox_gset:Nn \g_tmpa_box
          {
            \vbox_unpack_drop:N \g_tmpa_box
            \box_gset_to_last:N \g__piton_line_box
          }
        \box_if_empty:NTF \g__piton_line_box
          { \bool_gset_true:N \g_tmpa_bool }
          {
            \box_use:N \g__piton_line_box
            \int_gincr:N \g__piton_line_int
            \par
            \kern -2.5 pt
            \__piton_add_penalty_for_the_line:
            \cs_if_exist_use:cT { g__piton_after_line _ \int_use:N \g__piton_line_int _ tl }
              { \cs_undefine:c { g__piton_after_line _ \int_use:N \g__piton_line_int _ tl } }
            \int_compare:nNnT \g__piton_line_int < \g__piton_nb_lines_int
              { \mode_leave_vertical: }
          }
      }
    \skip_vertical:n { 2.5 pt }
  }
\cs_new_protected:Npn \__piton_composition_ii:
  {
    \use:e { \begin { minipage } [ \l__piton_box_str ] }
      { \l__piton_listing_width_dim }
    \vbox_unpack:N \g__piton_output_box
    \kern 2.5 pt
    \end { minipage }
  }
\cs_new_protected:Npn \__piton_composition_iii:
  {
    \use:e
      {
        \begin { tcolorbox }
          [ breakable , text~width = \l__piton_listing_width_dim ]
      }
    \par
    \vbox_unpack:N \g__piton_output_box
    \end { tcolorbox }
  }
\cs_new_protected:Npn \__piton_composition_iv:
  {
    \use:e
      {
        \begin { tcolorbox }
          [
            hbox ,
            text~width = \l__piton_listing_width_dim ,
            nobeforeafter ,
            box~align =
              \str_case:Nn \l__piton_box_str
                {
                  t { top }
                  b { bottom }
                  c { center }
                  m { center }
                }
          ]
      }
    \box_use:N \g__piton_output_box
    \end { tcolorbox }
  }
\cs_new_protected:Npn \__piton_add_penalty_for_the_line:
  {
    \int_case:nn
      {
        \lua_now:e
          {
            tex.sprint
              ( piton.lines_status [ \int_use:N \g__piton_line_int ] )
          }
      }
      { 1 { \penalty 100 } 2 \nobreak }
  }
\cs_new_protected:Npn \__piton_create_output_box:
  {
    \__piton_compute_code_width:
    \vbox_gset:Nn \g__piton_output_box
      { \__piton_retrieve_gobble_parse:o \l__piton_listing_tl }
    \bool_if:NT \l__piton_minimize_width_bool { \__piton_recompute_listing_width: }
    \bool_lazy_or:nnT
      { \int_compare_p:nNn \l__piton_bg_colors_int > { \c_zero_int } }
      { \g__piton_rowcolor_inside_bool }
      { \__piton_add_backgrounds_to_output_box: }
  }
\cs_new_protected:Npn \__piton_add_backgrounds_to_output_box:
  {
    \int_gset_eq:NN \g__piton_line_int \g__piton_nb_lines_int
    \vbox_set:Nn \l_tmpa_box
      {
        \vbox_unpack_drop:N \g__piton_output_box
        \bool_gset_false:N \g_tmpa_bool
        \unskip \unskip
        \bool_do_until:nn \g_tmpa_bool
          {
            \unskip \unskip \unskip
            \int_set_eq:NN \l_tmpa_int \lastpenalty
            \unpenalty \unkern
            \box_set_to_last:N \l__piton_line_box
            \box_if_empty:NTF \l__piton_line_box
              { \bool_gset_true:N \g_tmpa_bool }
              {
                \vbox_gset:Nn \g__piton_output_box
                  {
                    \__piton_add_background_to_line_and_use:
                    \kern -2.5 pt
                    \penalty \l_tmpa_int
                    \vbox_unpack:N \g__piton_output_box
                  }
              }
            \int_gdecr:N \g__piton_line_int
          }
      }
  }
\cs_new_protected:Npn \__piton_gobble_parse_no_print:n
  {
    \lua_now:e
      {
        piton.GobbleParseNoPrint
         (
           '\l_piton_language_str' ,
           \int_use:N \l__piton_gobble_int ,
           token.scan_argument ( )
         )
      }
  }
\cs_generate_variant:Nn \__piton_gobble_parse_no_print:n { o }
\cs_new_protected:Npn \__piton_retrieve_gobble_parse:n
  {
    \lua_now:e
      {
        piton.RetrieveGobbleParse
          (
            '\l_piton_language_str' ,
            \int_use:N \l__piton_gobble_int ,
            \bool_if:NTF \l__piton_splittable_on_empty_lines_bool
              { \int_eval:n { - \l__piton_splittable_int } }
              { \int_use:N \l__piton_splittable_int } ,
            token.scan_argument ( )
          )
      }
  }
\cs_generate_variant:Nn \__piton_retrieve_gobble_parse:n { o }
\cs_new_protected:Npn \__piton_retrieve_gobble_split_parse:n
  {
    \lua_now:e
      {
        piton.RetrieveGobbleSplitParse
          (
            '\l_piton_language_str' ,
            \int_use:N \l__piton_gobble_int ,
            \int_use:N \l__piton_splittable_int ,
            token.scan_argument ( )
          )
      }
  }
\cs_generate_variant:Nn \__piton_retrieve_gobble_split_parse:n { o }
\bool_if:NTF \g__piton_beamer_bool
  {
    \NewPitonEnvironment { Piton } { D < > { .- }  O { } }
      {
        \keys_set:nn { PitonOptions } { #2 }
        \begin { actionenv } < #1 >
      }
      { \end { actionenv } }
  }
  {
    \NewPitonEnvironment { Piton } { O { } }
      { \keys_set:nn { PitonOptions } { #1 } }
      { }
  }
\NewDocumentCommand { \PitonInputFileTF } { d < > O { } m m m }
  {
    \mode_if_vertical:F { \par }
    \group_begin:
    \seq_concat:NNN
      \l_file_search_path_seq
      \l__piton_path_seq
      \l_file_search_path_seq
    \file_get_full_name:nNTF { #3 } \l__piton_file_name_str
      {
        \__piton_input_file:nn { #1 } { #2 }
        #4
      }
      { #5 }
    \group_end:
  }
\cs_new_protected:Npn \__piton_unknown_file:n #1
  { \msg_error:nnn { piton } { Unknown~file } { #1 } }
\NewDocumentCommand { \PitonInputFile } { d < > O { } m }
  {
    \PitonInputFileTF < #1 > [ #2 ] { #3 } { }
      {
        \iow_log:n { No~file~#3 }
        \__piton_unknown_file:n { #3 }
      }
  }
\NewDocumentCommand { \PitonInputFileT } { d < > O { } m m }
  {
    \PitonInputFileTF < #1 >  [ #2 ] { #3 } { #4 }
      {
        \iow_log:n { No~file~#3 }
        \__piton_unknown_file:n { #3 }
      }
  }
\NewDocumentCommand { \PitonInputFileF } { d < > O { } m m }
  { \PitonInputFileTF < #1 >  [ #2 ] { #3 } { } { #4 } }
\cs_new_protected:Npn \__piton_input_file:nn #1 #2
  {
    \tl_if_novalue:nF { #1 }
      {
        \bool_if:NTF \g__piton_beamer_bool
          { \begin { uncoverenv } < #1 > }
          { \__piton_error_or_warning:n { overlay~without~beamer } }
      }
    \group_begin:
      \iow_log:e { (\l__piton_file_name_str) }
      \int_zero_new:N \l__piton_first_line_int
      \int_zero_new:N \l__piton_last_line_int
      \int_set_eq:NN \l__piton_last_line_int \c_max_int
      \bool_set_true:N \l__piton_in_PitonInputFile_bool
      \keys_set:nn { PitonOptions } { #2 }
      \bool_if:NT \l__piton_line_numbers_absolute_bool
        { \bool_set_false:N \l__piton_skip_empty_lines_bool }
      \bool_if:nTF
        {
          (
            \int_compare_p:nNn \l__piton_first_line_int > \c_zero_int
            || \int_compare_p:nNn \l__piton_last_line_int < \c_max_int
          )
          && ! \str_if_empty_p:N \l__piton_begin_range_str
        }
        {
          \__piton_error_or_warning:n { bad~range~specification }
          \int_zero:N \l__piton_first_line_int
          \int_set_eq:NN \l__piton_last_line_int \c_max_int
        }
        {
          \str_if_empty:NF \l__piton_begin_range_str
            {
              \__piton_compute_range:
              \bool_lazy_or:nnT
                \l__piton_marker_include_lines_bool
                { ! \str_if_eq_p:NN \l__piton_begin_range_str \l__piton_end_range_str }
                {
                  \int_decr:N \l__piton_first_line_int
                  \int_incr:N \l__piton_last_line_int
                }
            }
        }
      \__piton_pre_composition:
      \bool_if:NT \l__piton_line_numbers_absolute_bool
        { \int_gset:Nn \g__piton_visual_line_int { \l__piton_first_line_int - 1 } }
      \int_compare:nNnT \l__piton_number_lines_start_int > \c_zero_int
        {
          \int_gset:Nn \g__piton_visual_line_int
            { \l__piton_number_lines_start_int - 1 }
        }
      \int_compare:nNnT \g__piton_visual_line_int < \c_zero_int
        { \int_gzero:N \g__piton_visual_line_int }
      \lua_now:e
        {
          piton.ReadFile(
           '\l__piton_file_name_str' ,
           \int_use:N \l__piton_first_line_int ,
           \int_use:N \l__piton_last_line_int )
        }
      \__piton_composition:
    \group_end:
    \tl_if_novalue:nF { #1 }
      { \bool_if:NT \g__piton_beamer_bool { \end { uncoverenv } } }
  }
\cs_new_protected:Npn \__piton_compute_range:
  {
    \str_set:Ne \l_tmpa_str { \__piton_marker_beginning:n { \l__piton_begin_range_str } }
    \str_set:Ne \l_tmpb_str { \__piton_marker_end:n { \l__piton_end_range_str } }
    \tl_replace_all:Nee \l_tmpa_str { \c_backslash_str \c_hash_str } \c_hash_str
    \tl_replace_all:Nee \l_tmpb_str { \c_backslash_str \c_hash_str } \c_hash_str
    \lua_now:e
      {
        piton.ComputeRange
          ( '\l_tmpa_str' , '\l_tmpb_str' , '\l__piton_file_name_str' )
      }
  }
\NewDocumentCommand { \PitonStyle } { m }
  {
    \cs_if_exist_use:cF { pitonStyle _ \l_piton_language_str  _ #1 }
      { \use:c { pitonStyle _ #1 } }
  }
\NewDocumentCommand { \OptionalLocalPitonStyle } { m }
  { \cs_if_exist_use:c { pitonStyle _ \l_piton_language_str  _ #1 } }
\NewDocumentCommand { \SetPitonStyle } { O { } m }
  {
    \str_clear_new:N \l__piton_SetPitonStyle_option_str
    \str_set:Ne \l__piton_SetPitonStyle_option_str { \str_lowercase:n { #1 } }
    \str_if_eq:onT { \l__piton_SetPitonStyle_option_str } { current-language }
      { \str_set_eq:NN \l__piton_SetPitonStyle_option_str \l_piton_language_str }
    \keys_set:nn { piton / Styles } { #2 }
  }
\cs_new_protected:Npn \__piton_math_scantokens:n #1
  { \normalfont \scantextokens { \begin{math} #1 \end{math} } }
\clist_new:N \g__piton_styles_clist
\clist_gset:Nn \g__piton_styles_clist
  {
    Comment ,
    Comment.Internal ,
    Comment.LaTeX ,
    Discard ,
    Exception ,
    FormattingType ,
    Identifier.Internal ,
    Identifier ,
    InitialValues ,
    Interpol.Inside ,
    Keyword ,
    Keyword.Governing ,
    Keyword.Constant ,
    Keyword2 ,
    Keyword3 ,
    Keyword4 ,
    Keyword5 ,
    Keyword6 ,
    Keyword7 ,
    Keyword8 ,
    Keyword9 ,
    Name.Builtin ,
    Name.Class ,
    Name.Constructor ,
    Name.Decorator ,
    Name.Field ,
    Name.Function ,
    Name.Module ,
    Name.Namespace ,
    Name.Table ,
    Name.Type ,
    Number ,
    Number.Internal ,
    Operator ,
    Operator.Word ,
    Preproc ,
    Prompt ,
    String.Doc ,
    String.Doc.Internal ,
    String.Interpol ,
    String.Long ,
    String.Long.Internal ,
    String.Short ,
    String.Short.Internal ,
    Tag ,
    TypeParameter ,
    UserFunction ,
    TypeExpression ,
    Directive
  }
\clist_map_inline:Nn \g__piton_styles_clist
  {
    \keys_define:nn { piton / Styles }
      {
        #1 .value_required:n = true ,
        #1 .code:n =
          \tl_set:cn
            {
              pitonStyle _
              \str_if_empty:NF \l__piton_SetPitonStyle_option_str
                { \l__piton_SetPitonStyle_option_str _ }
              #1
            }
            { ##1 }
      }
  }

\keys_define:nn { piton / Styles }
  {
    String       .meta:n = { String.Long = #1 , String.Short = #1 } ,
    String       .value_required:n = true ,
    Comment.Math .tl_set:c = pitonStyle _ Comment.Math  ,
    Comment.Math .value_required:n = true ,
    unknown      .code:n = \__piton_unknown_style:
  }
\cs_new_protected:Npn \__piton_unknown_style:
  {
    \str_if_eq:eeTF \l__piton_SetPitonStyle_option_str { expl }
      {
        \seq_set_split:Nne \l_tmpa_seq { . } \l_keys_key_str
        \seq_get_left:NN \l_tmpa_seq \l_tmpa_str
        \bool_lazy_and:nnTF
          { \int_compare_p:nNn { \seq_count:N \l_tmpa_seq } > { 1 } }
          {
            \str_if_eq_p:Vn \l_tmpa_str { Module }
            ||
            \str_if_eq_p:Vn \l_tmpa_str { Type }
          }
          { \tl_set:co { pitonStyle _ expl _ \l_keys_key_str } \l_keys_value_tl }
          { \__piton_error:n { Unknown~key~for~SetPitonStyle } }
      }
      { \__piton_error:n { Unknown~key~for~SetPitonStyle } }
  }
\SetPitonStyle[OCaml]
  {
    TypeExpression =
      {
        \SetPitonStyle [ OCaml ] { Identifier = \PitonStyle { Name.Type } }
        \__piton_piton:n
      }
  }
\clist_gput_left:Nn \g__piton_styles_clist { String }
\clist_gsort:Nn \g__piton_styles_clist
  {
    \str_compare:nNnTF { #1 } < { #2 }
      \sort_return_same:
      \sort_return_swapped:
  }
\cs_set_eq:NN \__piton_break_strings_anywhere:n \prg_do_nothing:

\cs_set_eq:NN \__piton_break_numbers_anywhere:n \prg_do_nothing:

\cs_new_protected:Npn \__piton_actually_break_anywhere:n #1
  {
    \tl_set:Nn \l_tmpa_tl { #1 }
    \tl_replace_all:NVn \l_tmpa_tl \c_catcode_other_space_tl \space
    \seq_clear:N \l_tmpa_seq
    \tl_map_inline:Nn \l_tmpa_tl { \seq_put_right:Nn \l_tmpa_seq { ##1 } }
    \seq_use:Nn \l_tmpa_seq { \- }
  }
\cs_new_protected:Npn \__piton_comment:n #1
  {
    \PitonStyle { Comment }
      {
        \bool_if:NTF \l__piton_break_lines_in_Piton_bool
          {
            \tl_set:Nn \l_tmpa_tl { #1 }
            \tl_replace_all:NVn \l_tmpa_tl
              \c_catcode_other_space_tl
              \__piton_breakable_space:
            \l_tmpa_tl
          }
          { #1 }
      }
  }
\cs_new_protected:Npn \__piton_string_long:n #1
  {
    \PitonStyle { String.Long }
      {
        \bool_if:NTF \l__piton_break_strings_anywhere_bool
          { \__piton_actually_break_anywhere:n { #1 } }
          {
            \bool_if:NTF \l__piton_break_lines_in_Piton_bool
              {
                \tl_set:Nn \l_tmpa_tl { #1 }
                \tl_replace_all:NVn \l_tmpa_tl
                  \c_catcode_other_space_tl
                  \__piton_breakable_space:
                \l_tmpa_tl
              }
              { #1 }
          }
      }
  }
\cs_new_protected:Npn \__piton_string_short:n #1
  {
    \PitonStyle { String.Short }
      {
        \bool_if:NT \l__piton_break_strings_anywhere_bool
          { \__piton_actually_break_anywhere:n }
        { #1 }
      }
  }
\cs_new_protected:Npn \__piton_string_doc:n #1
  {
    \PitonStyle { String.Doc }
      {
        \bool_if:NTF \l__piton_break_lines_in_Piton_bool
          {
            \tl_set:Nn \l_tmpa_tl { #1 }
            \tl_replace_all:NVn \l_tmpa_tl
              \c_catcode_other_space_tl
              \__piton_breakable_space:
            \l_tmpa_tl
          }
          { #1 }
      }
  }
\cs_new_protected:Npn \__piton_number:n #1
  {
    \PitonStyle { Number }
      {
        \bool_if:NT \l__piton_break_numbers_anywhere_bool
          { \__piton_actually_break_anywhere:n }
        { #1 }
      }
  }
\SetPitonStyle
  {
    Comment               = \color [ HTML ] { 0099FF } \itshape ,
    Comment.Internal      = \__piton_comment:n ,
    Exception             = \color [ HTML ] { CC0000 } ,
    Keyword               = \color [ HTML ] { 006699 } \bfseries ,
    Keyword.Governing     = \color [ HTML ] { 006699 } \bfseries ,
    Keyword.Constant      = \color [ HTML ] { 006699 } \bfseries ,
    Name.Builtin          = \color [ HTML ] { 336666 } ,
    Name.Decorator        = \color [ HTML ] { 9999FF },
    Name.Class            = \color [ HTML ] { 00AA88 } \bfseries ,
    Name.Function         = \color [ HTML ] { CC00FF } ,
    Name.Namespace        = \color [ HTML ] { 00CCFF } ,
    Name.Constructor      = \color [ HTML ] { 006000 } \bfseries ,
    Name.Field            = \color [ HTML ] { AA6600 } ,
    Name.Module           = \color [ HTML ] { 0060A0 } \bfseries ,
    Name.Table            = \color [ HTML ] { 309030 } ,
    Number                = \color [ HTML ] { FF6600 } ,
    Number.Internal       = \__piton_number:n ,
    Operator              = \color [ HTML ] { 555555 } ,
    Operator.Word         = \bfseries ,
    String                = \color [ HTML ] { CC3300 } ,
    String.Long.Internal  = \__piton_string_long:n ,
    String.Short.Internal = \__piton_string_short:n ,
    String.Doc.Internal   = \__piton_string_doc:n ,
    String.Doc            = \color [ HTML ] { CC3300 } \itshape ,
    String.Interpol       = \color [ HTML ] { AA0000 } ,
    Comment.LaTeX         = \normalfont \color [ rgb ] { .468, .532, .6 } ,
    Name.Type             = \color [ HTML ] { 336666 } ,
    InitialValues         = \__piton_piton:n ,
    Interpol.Inside       = { \l__piton_font_command_tl \__piton_piton:n } ,
    TypeParameter         = \color [ HTML ] { 336666} \itshape ,
    Preproc               = \color [ HTML ] { AA6600} \slshape ,
    Identifier.Internal   = \__piton_identifier:n ,
    Identifier            = ,
    Directive             = \color [ HTML ] { AA6600} ,
    Tag                   = \colorbox { gray!10 } ,
    UserFunction          = \PitonStyle { Identifier } ,
    Prompt                = ,
    Discard               = \use_none:n
  }
\clist_new:N \g__piton_expl_styles_clist
\clist_gset:Nn \g__piton_expl_styles_clist
  {
    Scope.l ,
    Scope.g ,
    Scope.c
  }
\clist_map_inline:Nn \g__piton_expl_styles_clist
  {
    \keys_define:nn { piton / Styles }
      {
        #1 .value_required:n = true ,
        #1 .code:n =
          \tl_set:cn
            {
              pitonStyle _
              \str_if_empty:NF \l__piton_SetPitonStyle_option_str
                { \l__piton_SetPitonStyle_option_str _ }
              #1
            }
            { ##1 }
      }
  }
\SetPitonStyle [ expl ]
  {
    Scope.l          = ,
    Scope.g          = \bfseries ,
    Scope.c          = \slshape ,
    Type.bool        = \color [ HTML ] { AA6600} ,
    Type.box         = \color [ HTML ] { 267910 } ,
    Type.clist       = \color [ HTML ] { 309030 } ,
    Type.fp          = \color [ HTML ] { FF3300 } ,
    Type.int         = \color [ HTML ] { FF6600 } ,
    Type.seq         = \color [ HTML ] { 309030 } ,
    Type.skip        = \color [ HTML ] { 0CC060 } ,
    Type.str         = \color [ HTML ] { CC3300 } ,
    Type.tl          = \color [ HTML ] { AA2200 } ,
    Module.bool      = \color [ HTML ] { AA6600} ,
    Module.box       = \color [ HTML ] { 267910 } ,
    Module.cs        = \bfseries \color [ HTML ] { 006699 } ,
    Module.exp       = \bfseries \color [ HTML ] { 404040 } ,
    Module.hbox      = \color [ HTML ] { 267910 } ,
    Module.prg       = \bfseries ,
    Module.clist     = \color [ HTML ] { 309030 } ,
    Module.fp        = \color [ HTML ] { FF3300 } ,
    Module.int       = \color [ HTML ] { FF6600 } ,
    Module.seq       = \color [ HTML ] { 309030 } ,
    Module.skip      = \color [ HTML ] { 0CC060 } ,
    Module.str       = \color [ HTML ] { CC3300 } ,
    Module.tl        = \color [ HTML ] { AA2200 } ,
    Module.vbox      = \color [ HTML ] { 267910 }
  }
\hook_gput_code:nnn { begindocument } { . }
  {
    \bool_if:NT \g__piton_math_comments_bool
      { \SetPitonStyle { Comment.Math = \__piton_math_scantokens:n } }
  }
\NewDocumentCommand { \SetPitonIdentifier } { o m m }
  {
    \clist_set:Nn \l_tmpa_clist { #2 }
    \tl_if_novalue:nTF { #1 }
      {
        \clist_map_inline:Nn \l_tmpa_clist
          { \cs_set:cpn { PitonIdentifier _ ##1 } { #3 } }
      }
      {
        \str_set:Ne \l_tmpa_str { \str_lowercase:n { #1 } }
        \str_if_eq:onT \l_tmpa_str { current-language }
          { \str_set_eq:NN \l_tmpa_str \l_piton_language_str }
        \clist_map_inline:Nn \l_tmpa_clist
          { \cs_set:cpn { PitonIdentifier _ \l_tmpa_str _ ##1 } { #3 } }
      }
  }
\cs_new_protected:Npn \__piton_identifier:n #1
  {
    \cs_if_exist_use:cF { PitonIdentifier _ \l_piton_language_str _ #1 }
      {
        \cs_if_exist_use:cF { PitonIdentifier _ #1 }
          { \PitonStyle { Identifier } }
      }
    { #1 }
  }
\cs_new_protected:cpn { pitonStyle _ Name.Function.Internal } #1
  {
    { \PitonStyle { Name.Function } { #1 } }
    \cs_gset_protected:cpn { PitonIdentifier _ \l_piton_language_str _ #1 }
      { \PitonStyle { UserFunction } }
    \seq_if_exist:cF { g__piton_functions _ \l_piton_language_str _ seq }
      { \seq_new:c { g__piton_functions _ \l_piton_language_str _ seq } }
    \seq_gput_right:cn { g__piton_functions _ \l_piton_language_str _ seq } { #1 }
    \seq_if_in:NoF \g__piton_languages_seq { \l_piton_language_str }
      { \seq_gput_left:No \g__piton_languages_seq { \l_piton_language_str } }
  }
\NewDocumentCommand \PitonClearUserFunctions { ! o }
  {
    \tl_if_novalue:nTF { #1 }
      { \__piton_clear_all_functions: }
      { \__piton_clear_list_functions:n { #1 } }
  }
\cs_new_protected:Npn \__piton_clear_list_functions:n #1
  {
    \clist_set:Nn \l_tmpa_clist { #1 }
    \clist_map_function:NN \l_tmpa_clist \__piton_clear_functions_i:n
    \clist_map_inline:nn { #1 }
      { \seq_gremove_all:Nn \g__piton_languages_seq { ##1 } }
  }
\cs_new_protected:Npn \__piton_clear_functions_i:n #1
  { \__piton_clear_functions_ii:n { \str_lowercase:n { #1 } } }
\cs_new_protected:Npn \__piton_clear_functions_ii:n #1
  {
    \seq_if_exist:cT { g__piton_functions _ #1 _ seq }
      {
        \seq_map_inline:cn { g__piton_functions _ #1 _ seq }
          { \cs_undefine:c { PitonIdentifier _ #1 _ ##1} }
        \seq_gclear:c { g__piton_functions _ #1 _ seq }
      }
  }
\cs_generate_variant:Nn \__piton_clear_functions_ii:n { e }
\cs_new_protected:Npn \__piton_clear_functions:n #1
  {
    \__piton_clear_functions_i:n { #1 }
    \seq_gremove_all:Nn \g__piton_languages_seq { #1 }
  }
\cs_new_protected:Npn \__piton_clear_all_functions:
  {
    \seq_map_function:NN \g__piton_languages_seq \__piton_clear_functions_i:n
    \seq_gclear:N \g__piton_languages_seq
  }
\AtEndDocument
  {
    \lua_now:n { piton.write_files_now ( ) }
    \IfPDFManagementActiveTF
      { \__piton_join_files: }
      { \__piton_join_files_legacy: }
  }
\cs_new_protected:Npn \__piton_join_files:
  {
    \seq_map_inline:Nn \g__piton_join_seq
      {
        \lua_now:n { pdf.immediateobj ( "stream" , piton.join_files["##1"] ) }
        \str_set_convert:Nnnn \l_tmpa_str { ##1 } { } { utf16/hex }
        \pdfmanagement_add:nne { Catalog / Names } { EmbeddedFiles }
          {
            <<
               /Type /Filespec
               /UF <\l_tmpa_str>
               /EF << /F~\pdf_object_ref_last: >>
               /Desc (Computer~listing)
               /AFRelationship /Supplement
            >>
          }
      }
  }
\cs_new_protected:Npn \__piton_join_files_legacy:
  {
    \seq_map_inline:Nn \g__piton_join_seq
      {
        \str_set_convert:Nnnn \l_tmpa_str { ##1 } { } { utf16/hex }
        \lua_now:n { pdf.immediateobj ( "stream" , piton.join_files["##1"] ) }
        \pdfextension annot~width~0pt~height~0pt~depth~0pt
          {
            /Subtype /FileAttachment
            /F~2
            /Name /Paperclip
            /Contents (Computer~listing)
            /FS <<
                    /Type /Filespec
                    /UF <\l_tmpa_str>
                    /EF << /F~\pdf_object_ref_last: >>
                    /AFRelationship /Supplement
                >>
           }
      }
  }
\cs_new_protected:Npn \__piton_define_leading_space_normal:
  {
    \cs_set_protected:Npn \__piton_leading_space:
      {
        \int_gincr:N \g__piton_indentation_int
        \hbox:n { ~ }
      }
  }
\cs_new_protected:Npn \__piton_define_leading_space_Foxit:
  {
    \cs_set_protected:Npn \__piton_leading_space:
      {
        \int_gincr:N \g__piton_indentation_int
        \pdfextension literal { /Artifact << /ActualText (\space) >> BDC }
          {
            \color { white }
            \transparent { 0 }
            . % previously : ␣ U+2423
          }
        \pdfextension literal { EMC }
      }
  }
\__piton_define_leading_space_Foxit:
\AddToHook { env / piton / before }
  { \__piton_fatal:n { No~environment~piton } }
\__piton_msg_new:nn { No~environment~piton }
  {
    There~is~no~environment~piton!\\
    There~is~an~environment~{Piton}~and~a~command~
    \token_to_str:N \piton\ but~there~is~no~environment~
    {piton}.~This~error~is~fatal.
  }
\__piton_msg_new:nn { rounded-corners~without~Tikz }
  {
    TikZ~not~used \\
    You~can't~use~the~key~'rounded-corners'~because~
    you~have~not~loaded~the~package~TikZ. \\
    If~you~go~on,~that~key~will~be~ignored. \\
    You~won't~have~similar~error~till~the~end~of~the~document.
  }
\__piton_msg_new:nn { tcolorbox~not~loaded }
  {
    tcolorbox~not~loaded \\
    You~can't~use~the~key~'tcolorbox'~because~
    you~have~not~loaded~the~package~tcolorbox. \\
    Use~\token_to_str:N \usepackage[breakable]{tcolorbox}. \\
    If~you~go~on,~that~key~will~be~ignored.
  }
\__piton_msg_new:nn { library~breakable~not~loaded }
  {
    breakable~not~loaded \\
    You~can't~use~the~key~'tcolorbox'~because~
    you~have~not~loaded~the~library~'breakable'~of~tcolorbox'. \\
    Use~\token_to_str:N \tcbuselibrary{breakable}~in~the~preamble~
    of~your~document.\\
    If~you~go~on,~that~key~will~be~ignored.
  }
\__piton_msg_new:nn { Language~not~defined }
  {
    Language~not~defined \\
    The~language~'\l_tmpa_tl'~has~not~been~defined~previously.\\
    If~you~go~on,~your~command~\token_to_str:N \NewPitonLanguage\
    will~be~ignored.
  }
\__piton_msg_new:nn { bad~version~of~piton.lua }
  {
    Bad~number~version~of~'piton.lua'\\
    The~file~'piton.lua'~loaded~has~not~the~same~number~of~
    version~as~the~file~'piton.sty'.~You~can~go~on~but~you~should~
    address~that~issue.
  }
\__piton_msg_new:nn { Unknown~key~NewPitonLanguage }
  {
    Unknown~key~for~\token_to_str:N \NewPitonLanguage.\\
    The~key~'\l_keys_key_str'~is~unknown.\\
    This~key~will~be~ignored.\\
  }
\__piton_msg_new:nn { Unknown~key~for~SetPitonStyle }
  {
    The~style~'\l_keys_key_str'~is~unknown.\\
    This~setting~will~be~ignored.\\
    The~available~styles~are~(in~alphabetic~order):~
    \clist_use:Nnnn \g__piton_styles_clist { ~and~ } { ,~ } { ~and~ }.
  }
\__piton_msg_new:nn { Invalid~key }
  {
    Wrong~use~of~key.\\
    You~can't~use~the~key~'\l_keys_key_str'~here.\\
    That~key~will~be~ignored.
  }
\__piton_msg_new:nn { Unknown~key~for~line-numbers }
  {
    Unknown~key. \\
    The~key~'line-numbers / \l_keys_key_str'~is~unknown.\\
    The~available~keys~of~the~family~'line-numbers'~are~(in~
    alphabetic~order):~
    absolute,~false,~label-empty-lines,~resume,~skip-empty-lines,~
    sep,~start~and~true.\\
    That~key~will~be~ignored.
  }
\__piton_msg_new:nn { Unknown~key~for~marker }
  {
    Unknown~key. \\
    The~key~'marker / \l_keys_key_str'~is~unknown.\\
    The~available~keys~of~the~family~'marker'~are~(in~
    alphabetic~order):~ beginning,~end~and~include-lines.\\
    That~key~will~be~ignored.
  }
\__piton_msg_new:nn { bad~range~specification }
  {
    Incompatible~keys.\\
    You~can't~specify~the~range~of~lines~to~include~by~using~both~
    markers~and~explicit~number~of~lines.\\
    Your~whole~file~'\l__piton_file_name_str'~will~be~included.
  }
\cs_new_nopar:Nn \__piton_thepage:
  {
    \thepage
    \cs_if_exist:NT \insertframenumber
      {
        ~(frame~\insertframenumber
        \cs_if_exist:NT \beamer@slidenumber { ,~slide~\insertslidenumber }
        )
      }
  }
\__piton_msg_new:nn { SyntaxError }
  {
    Syntax~Error~on~page~\__piton_thepage:.\\
    Your~code~of~the~language~'\l_piton_language_str'~is~not~
    syntactically~correct.\\
    It~won't~be~printed~in~the~PDF~file.
  }
\__piton_msg_new:nn { FileError }
  {
    File~Error.\\
    It's~not~possible~to~write~on~the~file~'#1' \\
    \sys_if_shell_unrestricted:F
      { (try~to~compile~with~'lualatex~-shell-escape').\\ }
    If~you~go~on,~nothing~will~be~written~on~that~file.
  }
\__piton_msg_new:nn { InexistentDirectory }
  {
    Inexistent~directory.\\
    The~directory~'\l__piton_path_write_str'~
    given~in~the~key~'path-write'~does~not~exist.\\
    Nothing~will~be~written~on~'\l__piton_write_str'.
  }
\__piton_msg_new:nn { begin~marker~not~found }
  {
    Marker~not~found.\\
    The~range~'\l__piton_begin_range_str'~provided~to~the~
    command~\token_to_str:N \PitonInputFile\ has~not~been~found.~
    The~whole~file~'\l__piton_file_name_str'~will~be~inserted.
  }
\__piton_msg_new:nn { end~marker~not~found }
  {
    Marker~not~found.\\
    The~marker~of~end~of~the~range~'\l__piton_end_range_str'~
    provided~to~the~command~\token_to_str:N \PitonInputFile\
    has~not~been~found.~The~file~'\l__piton_file_name_str'~will~
    be~inserted~till~the~end.
  }
\__piton_msg_new:nn { Unknown~file }
  {
    Unknown~file. \\
    The~file~'#1'~is~unknown.\\
    Your~command~\token_to_str:N \PitonInputFile\ will~be~discarded.
  }
\cs_new_protected:Npn \__piton_error_if_not_in_beamer:
  {
    \bool_if:NF \g__piton_beamer_bool
      { \__piton_error_or_warning:n { Without~beamer } }
  }
\__piton_msg_new:nn { Without~beamer }
  {
    Key~'\l_keys_key_str'~without~Beamer.\\
    You~should~not~use~the~key~'\l_keys_key_str'~since~you~
    are~not~in~Beamer.\\
    However,~you~can~go~on.
  }
\__piton_msg_new:nn { rowcolor~in~detected-commands }
  {
     'rowcolor'~forbidden~in~'detected-commands'.\\
     You~should~put~'rowcolor'~in~'raw-detected-commands'.\\
     That~key~will~be~ignored.
  }
\__piton_msg_new:nnn { Unknown~key~for~PitonOptions }
  {
    Unknown~key. \\
    The~key~'\l_keys_key_str'~is~unknown~for~\token_to_str:N \PitonOptions.~
    It~will~be~ignored.\\
    For~a~list~of~the~available~keys,~type~H~<return>.
  }
  {
    The~available~keys~are~(in~alphabetic~order):~
    annotation,~
    add-to-split-separation,~
    auto-gobble,~
    background-color,~
    begin-range,~
    box,~
    break-lines,~
    break-lines-in-piton,~
    break-lines-in-Piton,~
    break-numbers-anywhere,~
    break-strings-anywhere,~
    continuation-symbol,~
    continuation-symbol-on-indentation,~
    detected-beamer-commands,~
    detected-beamer-environments,~
    detected-commands,~
    end-of-broken-line,~
    end-range,~
    env-gobble,~
    env-used-by-split,~
    font-command,~
    gobble,~
    indent-broken-lines,~
    join,~
    label-as-zlabel,~
    language,~
    left-margin,~
    line-numbers/,~
    marker/,~
    math-comments,~
    no-join,~
    no-write,~
    path,~
    path-write,~
    print,~
    prompt-background-color,~
    raw-detected-commands,~
    resume,~
    rounded-corners,~
    show-spaces,~
    show-spaces-in-strings,~
    splittable,~
    splittable-on-empty-lines,~
    split-on-empty-lines,~
    split-separation,~
    tabs-auto-gobble,~
    tab-size,~
    tcolorbox,~
    varwidth,~
    vertical-detected-commands,~
    width~and~write.
  }
\__piton_msg_new:nn { label~with~lines~numbers }
  {
    You~can't~use~the~command~\token_to_str:N \label\
    or~\token_to_str:N \zlabel\ because~the~key~'line-numbers'
    ~is~not~active.\\
    If~you~go~on,~that~command~will~ignored.
  }
\__piton_msg_new:nn { overlay~without~beamer }
  {
    You~can't~use~an~argument~<...>~for~your~command~
    \token_to_str:N \PitonInputFile\ because~you~are~not~
    in~Beamer.\\
    If~you~go~on,~that~argument~will~be~ignored.
  }
\__piton_msg_new:nn { label~as~zlabel~needs~zref~package }
  {
    The~key~'label-as-zlabel'~requires~the~package~'zref'.~
    Please~load~the~package~'zref'~before~setting~the~key.\\
    This~error~is~fatal.
  }
\hook_gput_code:nnn { begindocument } { . }
  {
    \bool_if:NT \g__piton_label_as_zlabel_bool
      {
        \IfPackageLoadedF { zref-base }
          { \__piton_fatal:n { label~as~zlabel~needs~zref~package } }
      }
  }
\cs_new_protected:Npn \__piton_test_version:n #1
  {
    \str_if_eq:onF \PitonFileVersion { #1 }
      { \__piton_error:n { bad~version~of~piton.lua } }
  }
\hook_gput_code:nnn { begindocument } { . }
  {
    \lua_load_module:n { piton }
    \lua_now:n
      {
        tex.sprint ( luatexbase.catcodetables.expl ,
                     [[\__piton_test_version:n {]] .. piton_version ..  "}" )
      }
  }

\endinput
%%
%% End of file `piton.sty'.
